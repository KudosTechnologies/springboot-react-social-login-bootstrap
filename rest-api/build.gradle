import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:1.2.1'
        classpath "org.openapitools:openapi-generator-gradle-plugin:7.5.0"
    }
}
plugins {
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
    id 'jacoco'
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2024.0.0"
        mavenBom "org.springframework.modulith:spring-modulith-bom:1.1.4"

    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    apiDef {
        transitive = false
    }
}


repositories {
    mavenLocal()
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
}

jar {
    enabled = false
}

def openApiServerDir = layout.buildDirectory.dir('generated/openapi/server').get().getAsFile().toString()

sourceSets {
    main {
        java.srcDir "src/main/java"
        java.srcDir "${openApiServerDir}/src/main/java"
        resources.srcDir "src/main/resources"
    }
    test {
        java.srcDir "src/test/java"
        resources.srcDir "src/test/resources"
    }
}

dependencies {
    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Security
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.12.5'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // Runtime
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.12.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.12.5'

    // Others
    implementation group: 'io.swagger.core.v3', name: 'swagger-annotations', version: '2.2.21'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.5.0'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation group: 'org.mapstruct', name: 'mapstruct', version: '1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.14.0'
    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '8.0'

    // Test
    testImplementation('org.springframework.boot:spring-boot-starter-test')

}
processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
processTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

test {
    useJUnitPlatform()
    description = "Runs all unit tests definied via JUnit."
    group = "testing"
}
tasks.withType(Test).configureEach {
    testLogging.showStandardStreams = true
}

jacoco {
    toolVersion = "0.8.12"
}
tasks.withType(JacocoReport).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
}


jacocoTestReport {
    description = "Generates jacoco code coverage report for unit test tasks."
    group = "reporting"
    executionData test
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            '**/ro/kudostech/springreactsocialloginblueprint/api/client/**',
                            '**/ro/kudostech/springreactsocialloginblueprint/api/server/**'
                    ])
        }))
    }
}

tasks.register('allTestReport', JacocoReport) {
    doFirst {
        println "Generating all test report"
    }
    description = "Generates jacoco code coverage report for test tasks."
    group = "reporting"
    executionData test
    sourceSets sourceSets.main

    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
                '**/ro/kudostech/springreactsocialloginblueprint/api/server/**'
        ])
    }))

    reports {
        xml.required = true
        html.required = true
    }
}

tasks.register('buildJavaServer', GenerateTask) {
    group 'openapi tools'
    generatorName = "spring"
    inputSpec = "$projectDir/spec/rest-api-specs.yaml".toString()
    outputDir = openApiServerDir
    apiPackage = 'ro.kudostech.springreactsocialloginblueprint.api.server'
    modelPackage = 'ro.kudostech.springreactsocialloginblueprint.api.server.model'
    typeMappings = [
            OffsetDateTime: "Instant"
    ]
    importMappings = [
            "java.time.OffsetDateTime": "java.time.Instant"
    ]

    // Check docs for all options: https://openapi-generator.tech/docs/generators/spring/
    configOptions = [
            interfaceOnly                 : "true",
            useBeanValidation             : "true",
            performBeanValidation         : "true",
            serializableModel             : "true",
            useSpringBoot3                : "true",
            dateLibrary                   : "java8",
            delegatePattern               : "false",
            hideGenerationTimestamp       : "true",
            library                       : "spring-boot",
            openApiNullable               : "false",
            skipDefaultInterface          : "true",
            useTags                       : "true",
            additionalModelTypeAnnotations: "@lombok.Builder @lombok.AllArgsConstructor"

    ]
}


compileJava.dependsOn buildJavaServer
test.finalizedBy jacocoTestReport
build.finalizedBy allTestReport




